#include "convolutions.hpp"
#include "gtest/gtest.h"

namespace {

class ConvolutionsTest : public ::testing::Test {

public:
    std::vector<std::complex<double>> expected_fft = {
        {1.6842083283563625e-13, 0.0},
        {-1.5543122344752192e-15, 9.592326932761353e-14},
        {-3.3314039106859017e-15, 4.18116921131642e-15},
        {1.0658141036401503e-14, 2.348121697082206e-14},
        {-9.59191018805299e-15, 8.941487561471085e-15},
        {2.0024037434348296e-14, 5.36062040690519e-16},
        {-3.70323375228229e-15, 1.6647197396118284e-14},
        {-1.831458992422701e-14, 8.510051843849572e-16},
        {-1.0658141036401503e-14, 4.996003610813204e-16},
        {-3.7945865520259003e-16, -2.9062293652986e-14},
        {-2.1094237467877974e-14, -4.263256414560601e-14},
        {-5.091764084506016e-15, -7.072183876739766e-14},
        {2.819638983579484e-13, -71.5},
        {2.5445865614372746e-15, 8.704377711126291e-14},
        {-8.881784197001252e-15, 4.771149285296359e-14},
        {1.1869958409108398e-14, 3.9213743458648e-14},
        {3.003495065031205e-15, 3.908481908914485e-14},
        {6.8329864642480125e-16, 1.2107659309202116e-14},
        {8.424385873028233e-15, 5.599642878919739e-14},
        {71.49999999999997, 9.597520669686206e-14},
        {-4.55578861936352e-14, -3.0863425007086334e-14},
        {-2.38530121229228e-15, 3.019806626980426e-14},
        {-6.868623580305004e-15, -9.18894643017498e-16},
        {-1.1325225030524325e-14, 7.105427357601002e-15},
        {-6.734096835195128e-15, 4.708679261602816e-15},
        {-2.842170943040401e-14, -6.4780856398134426e-15},
        {-2.1843048640587583e-15, -1.6951461694614653e-14},
        {1.921827342066386e-15, -2.2354294788501952e-15},
        {3.716546151145896e-14, 9.075827917599601e-15},
        {2.4433118155804753e-14, 9.71788061600532e-15},
        {1.5987211554602254e-14, 3.858281978750366e-14},
        {-2.90627715793144e-14, 3.7883244613833024e-14},
        {-6.752033022722706e-15, 2.842170943040401e-14},
        {-1.2605092071019538e-14, 1.0220449888896067e-14},
        {-2.2162475752307864e-14, 7.105427357601002e-15},
        {-2.130399968760416e-14, 8.68051773431726e-15},
        {-4.440892098500626e-15, 7.851701633874349e-15},
        {1.9719172086434452e-15, 3.022540662795139e-14},
        {-6.463351603196347e-14, -1.8875517994485553e-14},
        {-6.762719560952491e-15, -2.0647872478619046e-14},
        {-7.227308260361838e-15, 7.515160605884255e-16},
        {-1.1546319456101628e-14, -2.2912473664713865e-15},
        {8.608579291235952e-15, -4.004175422459723e-15},
        {-2.5417274890320117e-14, -1.1546319456101628e-14},
        {4.956367029225381e-16, -3.3732351645917562e-15},
        {7.61781381318514e-16, -1.1102230246251565e-15},
        {1.7013368510830244e-14, -2.5231121537983463e-14},
        {-1.687538997430238e-14, -3.0943336244678495e-15},
        {2.801201183191123e-14, 1.1944066007229649e-14},
        {-1.6918615323538485e-14, 4.772113707270555e-15},
        {-2.359281578385486e-14, -1.298646973653868e-14},
        {3.739233662748017e-14, 4.119439943642501e-16},
        {1.9984014443252818e-14, 1.4196292962030506e-15},
        {-3.4151499082931704e-16, 1.3478248250351934e-14},
        {-5.3433301861625806e-15, 8.881784197001252e-16},
        {-1.2789552033793421e-14, 4.7682078487936127e-14},
        {9.3562094820869e-15, -2.6201263381153694e-14},
        {-1.18064842125187e-14, 1.9551097579823558e-14},
        {4.884981308350689e-15, 3.711200484360439e-14},
        {-2.4331866336883738e-14, -1.876381864053538e-14},
        {-1.6351062425582436e-14, 1.3758307952702e-14},
        {-1.0207685822209044e-14, 1.0695547148216605e-14},
        {5.540836742443533e-15, -5.629065858939589e-15},
        {-7.105427357601002e-15, 4.016366975996232e-15},
        {-5.793900104846269e-15, 8.692647743982127e-15},
        {-1.6812291877934984e-14, 5.773159728050814e-15},
        {-1.4155352914824486e-14, 6.2935668623963725e-15},
        {-3.3606731759529817e-14, -1.532107773982716e-14},
        {1.53207456136168e-14, -2.2707281607999427e-14},
        {-3.3306690738754696e-14, 6.205038086798978e-15},
        {1.4726621393787042e-14, -4.0138282290968555e-14},
        {1.8031706590513527e-14, -1.9424067123154493e-15},
        {1.8031706590513527e-14, 1.9424067123154532e-15},
        {1.472662139378704e-14, 4.0138282290968555e-14},
        {-3.752553823233029e-14, -9.048215971311813e-15},
        {1.532074561361679e-14, 2.270728160799942e-14},
        {-3.350533486910949e-14, 1.3988810110276972e-14},
        {-1.4155352914824486e-14, -6.2935668623963725e-15},
        {-1.5601870074322494e-14, -8.215650382226158e-15},
        {-5.793900104846271e-15, -8.692647743982134e-15},
        {-1.3766765505351941e-14, -1.948928012482771e-15},
        {5.540836742443527e-15, 5.629065858939586e-15},
        {-1.0207685822209047e-14, -1.0695547148216606e-14},
        {-1.635106242558243e-14, -1.3758307952702004e-14},
        {-2.4331866336883744e-14, 1.8763818640535385e-14},
        {6.8833827526759706e-15, -3.880706763688179e-14},
        {-1.1806484212518695e-14, -1.9551097579823548e-14},
        {8.342706682345598e-15, 2.6423307986078726e-14},
        {-1.2789552033793421e-14, -4.7682078487936127e-14},
        {-5.115941112680265e-15, -3.9968028886505635e-15},
        {-3.415149908293123e-16, -1.3478248250351942e-14},
        {2.2648549702353193e-14, -1.5732796930418298e-15},
        {3.7392336627480166e-14, -4.1194399436425484e-16},
        {-2.3592815783854865e-14, 1.2986469736538679e-14},
        {-1.691861532353849e-14, -4.772113707270553e-15},
        {2.8012011831911234e-14, -1.1944066007229652e-14},
        {-2.3092638912203256e-14, 2.4440333015037497e-15},
        {1.7013368510830244e-14, 2.523112153798346e-14},
        {8.797311664146694e-16, 3.1086244689504383e-15},
        {4.956367029225381e-16, 3.3732351645917562e-15},
        {-2.7193698340707307e-14, 6.8833827526759706e-15},
        {8.608579291235955e-15, 4.004175422459725e-15},
        {-1.1546319456101628e-14, 4.71728615394712e-15},
        {-7.227308260361841e-15, -7.51516060588431e-16},
        {-6.762719560952479e-15, 2.0647872478619043e-14},
        {-6.463351603196345e-14, 1.8875517994485553e-14},
        {1.97191720864345e-15, -3.022540662795139e-14},
        {-6.661338147750939e-15, -5.7744164505859204e-15},
        {-2.1303999687604165e-14, -8.68051773431726e-15},
        {-2.0466256972366974e-14, -9.769962616701378e-15},
        {-1.2605092071019538e-14, -1.0220449888896067e-14},
        {-6.7870247096580946e-15, -3.197442310920451e-14},
        {-2.90627715793144e-14, -3.788324461383303e-14},
        {1.687538997430238e-14, -3.719815405607996e-14},
        {2.443311815580476e-14, -9.71788061600532e-15},
        {3.716546151145896e-14, -9.075827917599601e-15},
        {1.9218273420663908e-15, 2.235429478850192e-15},
        {-2.184304864058748e-15, 1.6951461694614653e-14},
        {-2.220446049250313e-14, 7.910903240680588e-15},
        {-6.734096835195128e-15, -4.708679261602815e-15},
        {-1.413819564875137e-14, -4.440892098500626e-15},
        {-6.868623580305004e-15, 9.18894643017498e-16},
        {-2.4623715849703494e-15, -2.4868995751603507e-14},
        {-4.55578861936352e-14, 3.086342500708632e-14},
        {71.49999999999997, -9.595116710668432e-14},
        {8.424385873028235e-15, -5.5996428789197383e-14},
        {6.832986464247989e-16, -1.2107659309202116e-14},
        {3.003495065031205e-15, -3.9084819089144854e-14},
        {1.1869958409108406e-14, -3.921374345864799e-14},
        {-1.2434497875801753e-14, -4.821926508030544e-14},
        {2.5445865614372813e-15, -8.704377711126291e-14},
        {2.814706570573305e-13, 71.5},
        {-5.091764084506016e-15, 7.072183876739766e-14},
        {-2.194324542090775e-14, 4.973799150320701e-14},
        {-3.7945865520259595e-16, 2.9062293652986e-14},
        {-1.2434497875801753e-14, -1.7624964236244897e-15},
        {-1.831458992422701e-14, -8.510051843849556e-16},
        {-3.703233752282291e-15, -1.6647197396118284e-14},
        {2.0024037434348293e-14, -5.360620406905183e-16},
        {-9.591910188052995e-15, -8.941487561471085e-15},
        {7.105427357601002e-15, -2.5780643140090113e-14},
        {-3.3314039106859e-15, -4.181169211316432e-15},
        {-4.498455572819167e-16, -9.414691248821327e-14}
    };

    std::vector<std::complex<double>> expected_hilbert = {
        {1.0, -0.9999999999999927},
        {1.174472189285474, -0.12300723093396003},
        {0.7709633316304235, 0.5014725056433801},
        {0.19611911023777376, 0.6058562102061016},
        {-0.12190676013204733, 0.3161930037542797},
        {-0.028567625977047865, 0.01642386595641924},
        {0.27028757237696244, 0.04341825418614196},
        {0.382983854736176, 0.4275453230354078},
        {0.042527229691878866, 0.8596404064402237},
        {-0.6654776445476391, 0.9096325580505579},
        {-1.3215626889667074, 0.3489303538426332},
        {-1.4356649894698206, -0.6461403613656521},
        {-0.7852498255487186, -1.5580253826895392},
        {0.39832597918231377, -1.831074974712112},
        {1.5286081420907738, -1.2249217578173934},
        {1.997526979571177, 0.010971117456420602},
        {1.5384766786424953, 1.2608285752271382},
        {0.3902645110506523, 1.8939432333138548},
        {-0.8427753154732802, 1.6274337874591376},
        {-1.5471890043744956, 0.6759952317766794},
        {-1.450135736406508, -0.3999671527937206},
        {-0.7470788471902973, -1.0450708897786254},
        {0.06247215975955448, -1.032787918774925},
        {0.5134732596920061, -0.5607011150613685},
        {0.4628228628693649, -0.06914046572392085},
        {0.14177340459527277, 0.08359251415505237},
        {-0.049860978259978345, -0.13368245616045424},
        {0.14219019241001393, -0.4233298426445441},
        {0.624651734478328, -0.3966085712331854},
        {1.0090636319749378, 0.1169024153867945},
        {0.8865161974752026, 0.9062093440625554},
        {0.13889119281458803, 1.483226042230777},
        {-0.9295224512172167, 1.395272177067833},
        {-1.7412196222691563, 0.5425859779854695},
        {-1.7912107768994812, -0.7132905421632255},
        {-0.971225586922444, -1.7331315020369136},
        {0.3386290204545545, -1.969624558041474},
        {1.4765749864736206, -1.293726411810482},
        {1.8800733601952206, -0.0723170547430887},
        {1.4052364548828213, 1.0519468336278082},
        {0.38845191590020556, 1.5395710753559373},
        {-0.581337993482688, 1.25467035213147},
        {-1.0282124045465457, 0.5041362813345449},
        {-0.8582409465459141, -0.19659649019868733},
        {-0.3669514959542569, -0.46837897885112634},
        {0.0048686679600559455, -0.29545800018960444},
        {-0.007055586265621784, 0.008418948866869391},
        {-0.311365125434472, 0.06060212967346057},
        {-0.5438111718664573, -0.2892346718968921},
        {-0.35130909012891826, -0.8287570454447779},
        {0.32154737016987595, -1.1177638521057325},
        {1.1466393740809981, -0.8008016741787148},
        {1.5970031071854376, 0.11421991648969113},
        {1.2890560008024918, 1.2067790439731316},
        {0.2585321315822562, 1.871023779344668},
        {-1.0177275452833365, 1.6835269908565142},
        {-1.8807542925712828, 0.6780468412400362},
        {-1.87375071276147, -0.652355182710953},
        {-1.012357741919301, -1.6338343118689742},
        {0.22862541267297268, -1.8002138786795683},
        {1.2025239154564586, -1.1508146783764068},
        {1.469964275150324, -0.1213768853670346},
        {1.0331568138847778, 0.7047902719702319},
        {0.286087554309947, 0.9548919692896934},
        {-0.2735027613654778, 0.6654570054929834},
        {-0.3731281771038563, 0.20374339926023638},
        {-0.11877898403223483, -0.02176705667200402},
        {0.1213339742696555, 0.14159075389298517},
        {0.013434920956345348, 0.48910497046621304},
        {-0.4746098148688586, 0.6196972704237187},
        {-1.02417251984428, 0.24647707350959416},
        {-1.1747271824834984, -0.5600521532629682},
        {-0.6535531954443248, -1.3708485886794342},
        {0.39778695130592473, -1.652902067032617},
        {1.461899203115101, -1.1196300891772126},
        {1.9384944043783412, 0.05324730000662147},
        {1.5120547909291862, 1.29573162125806},
        {0.3598523445428763, 1.963650691524103},
        {-0.9365932907867152, 1.7152425479687534},
        {-1.7260146132030663, 0.7093918299326887},
        {-1.6609363897356253, -0.4976198825479053},
        {-0.8795240523114755, -1.289300241163864},
        {0.1111533102156489, -1.3461491830805765},
        {0.7666662449968621, -0.8011146469582819},
        {0.8341097104059164, -0.10593112241527627},
        {0.47000547144647303, 0.2912251715530299},
        {0.08284847407466937, 0.23796451911901306},
        {0.018624847970933396, -0.05166127270168327},
        {0.308517771198264, -0.18650549451431198},
        {0.6514057879300705, 0.09000918573978564},
        {0.6418447411399009, 0.6856050569339626},
        {0.08550395847691808, 1.1955015514008813},
        {-0.8185907510189504, 1.1721109191479766},
        {-1.563613356041074, 0.4498049938279273},
        {-1.6443486784393275, -0.697037378146443},
        {-0.8935112032845738, -1.679955488556428},
        {0.3772607355443286, -1.938312017699615},
        {1.5328500098568407, -1.2846206394435276},
        {1.9777812612867596, -0.03259062287243581},
        {1.5030809894165698, 1.177588752936198},
        {0.4009688598041106, 1.7504274538468976},
        {-0.721854772186649, 1.472260693236821},
        {-1.311046107424417, 0.6074590924688753},
        {-1.1791169300334505, -0.29750508948473464},
        {-0.5744064288790436, -0.7673171570812364},
        {0.02607164089962184, -0.6778013524760361},
        {0.2518026887600795, -0.2873911735554822},
        {0.07576164313739614, -0.013025371205341297},
        {-0.20078739571111756, -0.11251878811098362},
        {-0.19673522974523083, -0.49404028637018504},
        {0.24419812592695855, -0.7836593384961137},
        {0.9075537136234493, -0.6046071629345837},
        {1.3286348756330173, 0.12441507729610535},
        {1.1057664532682348, 1.081736662582166},
        {0.19826719655846067, 1.7113779625410372},
        {-0.9959609794475995, 1.5686215538667523},
        {-1.8480442071229757, 0.6207305389846302},
        {-1.869124968969011, -0.6971475698433253},
        {-1.012367462769786, -1.7169812793539003},
        {0.2872955443497697, -1.9231421850195147},
        {1.364236628334159, -1.2493269760401586},
        {1.7084398915468701, -0.10334157468738132},
        {1.2470116659437902, 0.8914381282053359},
        {0.35043805710244086, 1.2705612109682562},
        {-0.42920797019687146, 0.9823528641365812},
        {-0.7110556481749402, 0.3682239811091177},
        {-0.500055190779314, -0.10304099462705216},
        {-0.1320516851194727, -0.16113089592307153},
        {0.0005427516302742137, 0.09881956227223189},
        {-0.252406451514107, 0.31498383830506077},
        {-0.68295565572888, 0.14856790904974937},
        {-0.8730982703645296, -0.44004434851191754},
        {-0.5062186453822731, -1.1247716899407685},
        {0.37272006729759916, -1.4116654769215007},
        {1.3334365028254467, -0.9755281681603846},
        {1.8031230604560164, 0.08920221522890989},
        {1.4270442363653468, 1.27830869167756},
        {0.31422239681667136, 1.9560991203823912},
        {-0.9966920378793255, 1.7336433107767744},
        {-1.839126204952404, 0.7090666601020869},
        {-1.8037602297646467, -0.5838874726123374},
        {-0.9683640279705069, -1.488761893889617},
        {0.16813695103047602, -1.6053704442997272}
    };

    std::vector<std::complex<double>> get_test_signal(int n, float f1, float f2) {
        std::vector<std::complex<double>> data(n);
        double w = 2 * M_PI / n;
        for (int i = 0; i < data.size(); i++) {
            data[i] = std::complex<double>{std::sin(w * ((float)i) * f1) + std::cos((w * (float)i) * f2), 0};
        }
        return data;
    }
};

TEST_F(ConvolutionsTest, convolution_fft_test) {

    int n = 143;
    int f1 = 12;
    int f2 = 19;
    std::vector<std::complex<double>> data = get_test_signal(n, f1, f2);

    std::vector<std::complex<double>> fft_result(data.size());
    fft(data, fft_result);

    for (int i = 0; i < expected_fft.size(); i++) {
        EXPECT_NEAR(std::real(fft_result[i]), std::real(expected_fft[i]), 2e-6) << "Unexpected value at index " << i;
        EXPECT_NEAR(std::imag(fft_result[i]), std::imag(expected_fft[i]), 2e-6) << "Unexpected value at index " << i;

        if (i != f1 && i != f2 && i != n - f2 && i != n - f1) {
            EXPECT_NEAR(std::real(fft_result[i]), 0, 2e-6) << "Unexpected value at index " << i;
            EXPECT_NEAR(std::imag(fft_result[i]), 0, 2e-6) << "Unexpected value at index " << i;
        } else {
            if (i == f1) {
                EXPECT_NEAR(std::real(fft_result[i]), 0, 2e-6) << "Unexpected value at index " << i;
                EXPECT_NEAR(std::imag(fft_result[i]), -71.5, 2e-6) << "Unexpected value at index " << i;
            } else if (i == n - f1) {
                EXPECT_NEAR(std::real(fft_result[i]), 0, 2e-6) << "Unexpected value at index " << i;
                EXPECT_NEAR(std::imag(fft_result[i]), 71.5, 2e-6) << "Unexpected value at index " << i;
            } else if (i == f2 || i == n - f2) {
                EXPECT_NEAR(std::real(fft_result[i]), 71.5, 2e-6) << "Unexpected value at index " << i;
                EXPECT_NEAR(std::imag(fft_result[i]), 0, 2e-6) << "Unexpected value at index " << i;
            }
        }
    }
}

TEST_F(ConvolutionsTest, convolution_ifft_test) {
    int n = 143;
    int f1 = 12;
    int f2 = 19;
    std::vector<std::complex<double>> data = get_test_signal(n, f1, f2);

    std::vector<std::complex<double>> result(data.size());
    fft(data, result);

    // reverse
    std::vector<std::complex<double>> data_2(data.size());
    ifft(result, data_2);

    for (int i = 0; i < expected_fft.size(); i++) {
        EXPECT_NEAR(std::real(data_2[i]), std::real(data[i]), 2e-6);
        EXPECT_NEAR(std::imag(data_2[i]), std::imag(data[i]), 2e-6);
    }
}

TEST_F(ConvolutionsTest, convolution_hilbert_test) {
    int n = 143;
    int f1 = 12;
    int f2 = 19;
    std::vector<std::complex<double>> data = get_test_signal(n, f1, f2);

    std::vector<std::complex<double>> hilbert_result(data.size());
    hilbert_transform(data, hilbert_result);

    for (int i = 0; i < expected_fft.size(); i++) {
        EXPECT_NEAR(std::real(hilbert_result[i]), std::real(expected_hilbert[i]), 2e-6);
        EXPECT_NEAR(std::imag(hilbert_result[i]), std::imag(expected_hilbert[i]), 2e-6);
    }
}

} // namespace